#include "SceneRenderer.hpp"

#include "Scene.hpp"
#include "Bloom/Graphics/Renderer.hpp"
#include "Bloom/Asset/ConcreteAssets.hpp"
#include "Bloom/Asset/StaticMesh.hpp"

using namespace bloom;

template <typename LightComponent>
static void submitLights(Renderer& renderer, Scene const& scene, auto&& lightModifier) {
	auto view = scene.view<TransformMatrixComponent const, LightComponent const>();
	view.each([&](auto id, TransformMatrixComponent const& transform, LightComponent light) {
		lightModifier(transform, light);
		renderer.submit(light.light);
	});
}

template <typename Light>
static void submitLights(Renderer& renderer, Scene const& scene) {
	submitLights<Light>(renderer, scene, [](auto&, auto&) { /* no-op */ });
}

namespace bloom {
		
	SceneRenderer::SceneRenderer(Renderer& renderer, CommandQueue& commandQueue):
		renderer(&renderer),
		commandQueue(&commandQueue)
	{
	
	}
	
	void SceneRenderer::begin(Camera const& camera) {
		renderer->beginScene(camera);
	}
	
	void SceneRenderer::end() {
		renderer->endScene();
	}
	
	void SceneRenderer::submitScene(Scene const& scene) {
		/* submit meshes */ {
			auto view = scene.view<TransformMatrixComponent const, MeshRendererComponent const>();
			view.each([&](auto const id, TransformMatrixComponent const& transform, MeshRendererComponent const& meshRenderer) {
				if (!meshRenderer.mesh || !meshRenderer.material) {
					return;
				}
				EntityRenderData entityData;
				entityData.transform = transform.matrix;
				entityData.ID = utl::to_underlying(id);
				renderer->submit(meshRenderer.mesh->getRenderMesh(),
								 Reference<Material>(meshRenderer.material, &meshRenderer.material->material),
								 entityData);
			});
		}

		submitLights<PointLightComponent>(*renderer, scene, [](auto& transform, auto& light) {
			light.light.position = transform.matrix.column(3).xyz;
		});
		submitLights<SpotLightComponent>(*renderer, scene, [](auto& transform, auto& light) {
			light.light.position = transform.matrix.column(3).xyz;
			light.light.direction = mtl::normalize((transform.matrix * mtl::float4{ 1, 0, 0, 0 }).xyz);
		});
		submitLights<DirectionalLightComponent>(*renderer, scene, [](auto& transform, auto& light) {
			light.light.direction = mtl::normalize((transform.matrix * mtl::float4{ 0, 0, 1, 0 }).xyz);
		});
		submitLights<SkyLightComponent>(*renderer, scene);
	}
	
	void SceneRenderer::draw(Framebuffer& framebuffer) {
		renderer->draw(framebuffer, *commandQueue);
	}
	
}
