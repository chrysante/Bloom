#include "Dockspace.hpp"

#include <imgui/imgui.h>
#include <imgui/imgui_internal.h>
#include <mtl/mtl.hpp>
#include <utl/scope_guard.hpp>

#include "Editor.hpp"

#include "Poppy/IconConfig.hpp"

#include "Bloom/Scene/SceneSystem.hpp"

using namespace bloom;
using namespace mtl::short_types;

static constexpr auto MainWindowID = "__MainWindow__";
static constexpr auto MainDockspaceID = "__MainWindow_Dockspace__";
static constexpr auto ToolbarID = "__Toolbar__";

namespace poppy {
    
	
	static void withWindowSizeConstraints(mtl::float2 minSize, auto&& block) {
		ImGuiStyle& style = ImGui::GetStyle();
		utl::scope_guard restore = [&, oldSize = style.WindowMinSize] {
			style.WindowMinSize = oldSize;
		};
		
		style.WindowMinSize = minSize;
		block();
	}
	
	void Dockspace::display() {
		dockspace();
		toolbar();
		
		firstFrame = false;
	}
	
	void Dockspace::dockspace() {
		mainWindow();
	}
	
	void Dockspace::mainWindow() {
		ImGuiViewport* const viewport = ImGui::GetMainViewport();
		auto const windowPosition = float2(viewport->Pos) + float2(0, toolbarHeight);
		auto const windowSize = float2(viewport->Size) - float2(0, toolbarHeight);
		
		ImGui::SetNextWindowPos(windowPosition);
		ImGui::SetNextWindowSize(windowSize);
		ImGui::SetNextWindowViewport(viewport->ID);
		
		ImGuiWindowFlags windowFlags = 0;
		windowFlags |= ImGuiWindowFlags_MenuBar;
		windowFlags |= ImGuiWindowFlags_NoTitleBar;
		windowFlags |= ImGuiWindowFlags_NoResize;
		windowFlags |= ImGuiWindowFlags_NoBringToFrontOnFocus;
		windowFlags |= ImGuiWindowFlags_NoDocking;
		windowFlags |= ImGuiWindowFlags_NoCollapse;
		windowFlags |= ImGuiWindowFlags_NoMove;
		windowFlags |= ImGuiWindowFlags_NoNavFocus;
		
		ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0.0f, 0.0f));
		ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
		ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 0.0f);
		ImGui::Begin(MainWindowID, nullptr, windowFlags);
		
		withWindowSizeConstraints({ 0, minWindowWidth }, [&]{
			submitMasterDockspace();
		});
		
		ImGui::End();
		ImGui::PopStyleVar(3);
		
		ImGui::Begin("Test Window");
		ImGui::Text("Test Test Test!");
		ImGui::End();
		
		pane("Left");
		pane("Bottom");
	}
	
	void Dockspace::submitMasterDockspace() {
		ImGuiDockNodeFlags flags = 0;
		flags |= ImGuiDockNodeFlags_NoWindowMenuButton;
		flags |= ImGuiDockNodeFlags_NoCloseButton;
//		flags |= ImGuiDockNodeFlags_NoTabBar;
		flags |= ImGuiDockNodeFlags_PassthruCentralNode;
		flags |= ImGuiDockNodeFlags_NoDockingInCentralNode;
//		flags |= ImGuiDockNodeFlags_NoDockingSplitMe;
//		flags |= ImGuiDockNodeFlags_NoDockingOverMe;
		
		ImGuiID dockID = ImGui::GetID(MainDockspaceID);
		
		ImGui::DockSpace(dockID, /* size arg */ {}, flags);
		
		if (firstFrame) {
			ImGuiViewport* const viewport = ImGui::GetMainViewport();
			
			ImGui::DockBuilderRemoveNode(dockID); // clear any previous layout
			ImGui::DockBuilderAddNode(dockID, flags | ImGuiDockNodeFlags_DockSpace);
			ImGui::DockBuilderSetNodeSize(dockID, viewport->Size);

			// split the dockspace into 2 nodes -- DockBuilderSplitNode takes in the following args in the following order
			//   window ID to split, direction, fraction (between 0 and 1), the final two setting let's us choose which id we want (which ever one we DON'T set as NULL, will be returned by the function)
			//                                                              out_id_at_dir is the id of the node in the direction we specified earlier, out_id_at_opposite_dir is in the opposite direction
			auto dock_id_left = ImGui::DockBuilderSplitNode(dockID, ImGuiDir_Left, 0.2f, nullptr, &dockID);
			auto dock_id_down = ImGui::DockBuilderSplitNode(dockID, ImGuiDir_Down, 0.25f, nullptr, &dockID);

			// we now dock our windows into the docking node we made above
			ImGui::DockBuilderDockWindow("Bottom", dock_id_down);
			ImGui::DockBuilderDockWindow("Left", dock_id_left);
			ImGui::DockBuilderFinish(dockID);
		}
	}
	
//	void Dockspace::submitChildDockspace() {
//		ImGuiDockNodeFlags flags = 0;
////		flags |= ImGuiDockNodeFlags_NoWindowMenuButton;
////		flags |= ImGuiDockNodeFlags_NoCloseButton;
//
//		ImGuiID dockID = ImGui::GetID("ChildDock");
//
//		ImGui::DockSpace(dockID, /* size arg */ {}, flags);
//
//		if (firstFrame) {
//			ImGuiWindow* const window = ImGui::GetCurrentWindow();
//
//			ImGui::DockBuilderRemoveNode(dockID); // clear any previous layout
//			ImGui::DockBuilderAddNode(dockID, flags | ImGuiDockNodeFlags_DockSpace);
//			ImGui::DockBuilderSetNodeSize(dockID, window->Size);
//
//			ImGui::DockBuilderFinish(dockID);
//		}
//	}
	
	void Dockspace::pane(char const* id) {
		ImGuiWindowFlags windowFlags = 0;
		windowFlags |= ImGuiWindowFlags_NoTitleBar;
		windowFlags |= ImGuiWindowFlags_NoResize;
		windowFlags |= ImGuiWindowFlags_NoBringToFrontOnFocus;
		windowFlags |= ImGuiWindowFlags_NoCollapse;
		windowFlags |= ImGuiWindowFlags_NoMove;
		windowFlags |= ImGuiWindowFlags_NoNavFocus;
		
		ImGui::Begin(id, nullptr, windowFlags);
		ImGui::Text("Some Content Here");
//		submitChildDockspace();
		ImGui::End();
	}
	
	void Dockspace::toolbar() {
		ImGuiViewport* viewport = ImGui::GetMainViewport();
		
		ImGui::SetNextWindowPos(ImVec2(viewport->Pos.x,
									   viewport->Pos.y + ImGui::FindWindowByName(MainWindowID)->MenuBarHeight()));
		ImGui::SetNextWindowSize(ImVec2(viewport->Size.x, toolbarHeight));
		ImGui::SetNextWindowViewport(viewport->ID);

		ImGuiWindowFlags window_flags = 0
			| ImGuiWindowFlags_NoDocking
			| ImGuiWindowFlags_NoTitleBar
			| ImGuiWindowFlags_NoResize
			| ImGuiWindowFlags_NoMove
			| ImGuiWindowFlags_NoScrollbar
			| ImGuiWindowFlags_NoSavedSettings
			;
		
		ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 0);
		ImGui::PushStyleColor(ImGuiCol_WindowBg, GImGui->Style.Colors[ImGuiCol_TitleBg]);
		ImGui::Begin(ToolbarID, NULL, window_flags);
		ImGui::PopStyleColor();
		ImGui::PopStyleVar();

		auto& sceneSystem = Application::get().sceneSystem();
		bool const isSimulating = sceneSystem.isSimulating();
		
		
		
		ImGui::BeginDisabled(sceneSystem.getScene() == nullptr);
		auto const buttonLabel = !isSimulating ? IconConfig::unicodeStr("play") : IconConfig::unicodeStr("stop");
		ImGui::PushFont((ImFont*)IconConfig::font(16));
		bool const playStop = ImGui::Button(buttonLabel.data(), ImVec2(37, 37));
		ImGui::PopFont();
		if (playStop) {
			auto& editor = Editor::get();
			!isSimulating ? editor.startSimulation() : editor.stopSimulation();
		}
		
		ImGui::EndDisabled();
		
		ImGui::SameLine();
		if (ImGui::Button("Some Other Button", ImVec2(0, 37))) {
			
		}
		ImGui::Separator();
		
		ImGui::End();
	}

}

