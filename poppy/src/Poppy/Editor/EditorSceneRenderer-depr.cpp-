#include "EditorSceneRenderer.hpp"

#include "SelectionContext.hpp"


#include "Bloom/Scene/Scene.hpp"
#include "Bloom/Graphics/Renderer.hpp"
#include "Bloom/Asset/ConcreteAssets.hpp"
#include "Bloom/Asset/StaticMesh.hpp"


using namespace bloom;

namespace poppy {
	
	void EditorSceneRenderer::submitSelection(SelectionContext const& selection) {
		for (auto entity: selection.entities()) {
			if (!entity.has<TransformMatrixComponent>() || !entity.has<MeshRendererComponent>()) {
				continue;
			}
			auto const& transform = entity.get<TransformMatrixComponent>();
			auto const& meshRenderer = entity.get<MeshRendererComponent>();
			if (!meshRenderer.mesh || !meshRenderer.material) {
				continue;
			}
			EntityRenderData entityData;
			entityData.transform = transform.matrix;
			entityData.ID = entity.raw();
			renderer->submit(meshRenderer.mesh->getRenderMesh(),
							 Reference<Material>(meshRenderer.material, &meshRenderer.material->material),
							 entityData);
		}
	}
	
	void EditorSceneRenderer::submitShadowCascadeViz(bloom::EntityHandle entity) {
		if (!entity.has<DirectionalLightComponent>()) {
			return;
		}
		auto const& transform = entity.get<Transform>();
		auto light = entity.get<DirectionalLightComponent>();
		light.light.direction = mtl::rotate({ 0, 0, 1 }, transform.orientation);
		renderer->submitShadowCascadeViz(light.light);
 	}
	
	void EditorSceneRenderer::drawDebugInfo(EditorFramebuffer& framebuffer,
											bloom::DebugDrawOptions const& options)
	{
		renderer->drawDebugInfo(framebuffer, *commandQueue, options);
	}
	
	void EditorSceneRenderer::drawSelection(bloom::EditorFramebuffer& framebuffer) {
		renderer->drawSelection(framebuffer, *commandQueue);
	}
	
}
